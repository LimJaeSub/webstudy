


/* =========================base settings================================ */
.flexContainer{
    margin:10px;
    padding:15px;
    border-radius:23px;
    background-color:#a4a4a4;
    display:flex;
}

.flexContainer .flexitem{
    margin:10px;
    padding:20px;
    color:white;
    text-align:center;
    border-radius:25px;
    background-color:black;
}
/* =========================base settings================================ */



/* =========================direction================================ */
.flexContainer.direction{
    flex-direction:column-reverse;
}



/* 
    row(left to right)
    row-reverse(right to left)
    colum(Top to Bottom)
    colum-reverse(bottom to top)
    부모요소가 flex되면 자식요소는 모두 flexitem이 된다.
*/

/* =========================direction================================ */



/* =========================wrap================================ */
.flexContainer.wrap{
    flex-wrap:wrap-reverse;
    /* default값 : nowrap */
    /* 
        max-width같은 느낌
        오버되지 않게 만든다.

        nowrap : 1행에 모두 배치하는 것. 
        flexitem들의 width를 자동으로 축소한다

        wrap은 초과시 행을 추가한다.
        
        wrap-reverse : 행을 추가하되 역순으로 배치한다.
    */
}
.flexContainer.wrap .flexitem{
    width:500px;
}
/* =========================wrap================================ */




/* =========================flow================================ */

.flexContainer.flow{
    flex-flow:column-reverse wrap;
    /* 
        flex-flow:direction과 wrap을 줄여쓴다.
        flex-direction / flex-wrap
    */
}
.flexContainer.wrap .flexitem{
    width:500px;
}
/* =========================flow================================ */



/* ======================justifyContent==============================   */

.flexContainer.justifyContent{
    justify-content:space-evenly;
    background-color:green;
    /* 
        flex-start,end
        center
        space-between,around,evenly
    */
}

/* ======================justifyContent==============================   */

/* =========================alignContent==================================== */

.flexContainer.alignContent{
    height:400px;
    background-color:coral;
    flex-wrap:wrap;
    justify-content:space-between;
    align-content:space-around;
    /* 
        flex-start,end
        center
        space-between,around,evenly
    */
}


/* =========================alignContent==================================== */





/* !items */

.flexContainer.justifyitems{
    background-color:yellow;
    display:grid;
    width:300px;
    justify-items:center;
    /* 
        stretch(default)
        start
        center
        end
    */
}
.flexContainer.justifyitems:hover{
    justify-items: flex-end;
}

/* ============================================================= */

.flexContainer.alignitems{
    background-color:blue;
    align-items:baseline;
    /* 
        baseline
    */
}
.flexContainer.alignitems:hover{
    align-items:flex-start;
}
.flexContainer.alignitems .flexitem:nth-of-type(1){
    line-height:50px;
}
.flexContainer.alignitems .flexitem:nth-of-type(2){
    line-height:150px;
}

/* *items는 자기들끼리 조정한다. (content는 지시) */

/* ============================================================= */


.flexContainer.orderitem .flexitem.order1{
    order:1;
}
.flexContainer.orderitem .flexitem.order2{
    order:0;
}
.flexContainer.orderitem .flexitem.order3{
    order:-1;
}

/* ============================================================= */

.flexContainer.flexShortHand{
    margin:0;
    padding:0;
}
.flexContainer.flexShortHand .flexitem{
    margin:0;
    padding:0;
    word-break:break-all;
}

.flexContainer.flexShortHand .flexitem:first-child{
    /* *ex.1 
    flex-grow: 2;
    flex-basis: 0;*/
    
    /* *ex.2 */
    flex-shrink: 2;
    flex-basis: 300px;
}
.flexContainer.flexShortHand .flexitem:not(:first-child){
    /* *ex.1     
    flex-grow: 1;
    flex-basis: 0;*/
    /* *ex.2 */
    flex-shrink: 1;
    flex-basis: 300px;
}